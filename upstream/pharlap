#!/usr/bin/python3
#
# Copyright 2012-2014 "Korora Project" <dev@kororaproject.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the temms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#

import dnf
import hawkey
import logging
import os

from Lens.Thread import Thread
from Lens.App import App

from Pharlap import detect, modprobe
from Pharlap.DNFCache import DNFCache

class DetectThread(Thread):
  def __init__(self, config, do_cache=False, do_modules=False, do_modaliases=False, do_devices=False):
    Thread.__init__(self)

    self._config = config

    self._modprobe = modprobe.modprobe()

    self._build_cache = do_cache
    self._build_modules = do_modules
    self._build_modaliases = do_modaliases
    self._build_devices = do_devices

  def _progress_cb(self, percentage, alias):
    self.emit('progress', int(percentage), alias)

  def run(self):
    modules = {}

    if self._build_cache:
      self._config.cache = DNFCache(dnf.Base())

    if self._build_modaliases:
      self._config.modaliases = detect.system_modaliases()

    if self._build_modules:
      self._modprobe.parse()
      modules = self._modprobe.getConfig()
      self._config.loaded_modules = detect.loaded_modules_for_modaliases(modaliases=self._config.modaliases)

    if self._build_devices:
      self._config.devices = detect.system_driver_packages(cache=self._config.cache, modaliases=self._config.modaliases, progress_cb=self._progress_cb)

    self.emit('complete', self._config.modaliases, self._config.loaded_modules, self._config.devices, modules)



class PharlapConfig(object):
  def __init__(self):

    self._cache = None

    self._modaliases = detect.system_modaliases()
    self._devices = {}
    self._loaded_modules = {}

  @property
  def cache(self):
    return self._cache

  @cache.setter
  def cache(self, cache):
    if not isinstance(cache, DNFCache):
      raise TypeError("Cache is must be a DNFCache type.")

    self._cache = cache

  @property
  def devices(self):
    return self._devices

  @devices.setter
  def devices(self, devices):
    self._devices = devices

  @property
  def loaded_modules(self):
    return self._loaded_modules

  @loaded_modules.setter
  def loaded_modules(self, loaded_modules):
    self._loaded_modules = loaded_modules

  @property
  def modaliases(self):
    return self._modaliases

  @modaliases.setter
  def modaliases(self, modaliases):
    self._modaliases = modaliases



app = App(name="Pharlap", width=792, height=496, inspector=True)

app.namespaces.append('data')
app.load_ui('app.html')

db = dnf.Base()
config = PharlapConfig()

@app.connect('init')
def init_cb():
  t = DetectThread(config, do_cache=True, do_modules=True, do_modaliases=True, do_devices=True)

  app.manager.on_thread(t, 'progress', _detect_thread_progress_cb)
  app.manager.on_thread(t, 'complete', _detect_thread_complete_cb)

  app.manager.add_thread(t)

@app.connect('close')
def close_cb():
  app.close()

def _detect_thread_progress_cb(thread, *args):
  app.emit('update-progress', *args)

def _detect_thread_complete_cb(thread, modaliases, loaded_modules, devices, modules):
  app.emit('init-config', os.uname()[2], modaliases, loaded_modules, devices, modules)
  app.emit('init-complete')

app.start()
