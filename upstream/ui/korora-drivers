#!/usr/bin/python
#
# Copyright 2012-2013 "Korora Project" <dev@kororaproject.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the temms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#

import inspect
import os
import signal
import subprocess
import sys


from gi.repository import Gtk

import KororaDrivers.detect
from KororaDrivers.YumCache import YumCache

class App(object):
  def __init__(self):

    self._build_app()

  def _build_app(self):
    # build window
    w = Gtk.Window()
    w.set_position(Gtk.WindowPosition.CENTER)
    w.set_wmclass('Korora Drivers', 'Korora Drivers')
    w.set_title('Korora Drivers')
    w.set_size_request(600, 400)


    # devices list - row 1
    sw_devices = Gtk.ScrolledWindow()
    bx_devices = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
    sw_devices.add_with_viewport(bx_devices)


    # controls - row 2
    l_inuse = Gtk.Label('<b>%d proprietary driver(s) are in use.</b>' % (0))
    l_inuse.set_use_markup(True)
    l_inuse.set_halign(Gtk.Align.START)

    b_revert = Gtk.Button('Revert')
    b_revert.set_margin_left(8)
    b_revert.set_state(Gtk.StateType.INSENSITIVE)

    b_apply = Gtk.Button('Apply Changes')
    b_apply.set_margin_left(8)
    b_apply.set_state(Gtk.StateType.INSENSITIVE)

    bx_controls = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL)
    bx_controls.pack_start(l_inuse, True, True, 0)
    bx_controls.pack_start(b_revert, False, False, 0)
    bx_controls.pack_start(b_apply, False, False, 0)

    # disclaimer - row 3
    l_proprietary = Gtk.Label('A proprietary driver has private code that Korora and other open source developers can\'t review or improve. Security and other updates are dependant on the driver vendor  and their associated support process, if any.')
    l_proprietary.set_line_wrap(True)
    l_proprietary.set_halign(Gtk.Align.START)

    bx_main = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
    bx_main.pack_start(sw_devices, True, True, 0)
    bx_main.pack_start(bx_controls, False, False, 8)
    bx_main.pack_start(l_proprietary, False, False, 0)

    self._box = bx_devices
    self._bapply = b_apply
    self._brevert = b_revert

    bx_main.set_margin_left(8)
    bx_main.set_margin_right(8)
    bx_main.set_margin_top(8)
    bx_main.set_margin_bottom(8)

    # add the box to the parent window and show
    w.add(bx_main)
    w.connect('delete-event', self.close)
    w.show_all()

    self._window = w


  def addNoDeviceWidget(self):
    l_title = Gtk.Label('<b>No additional drivers were identified for you hardware.</b>')
    l_title.set_use_markup(True)

    self._box.pack_start(l_title, True, True, 1)
    l_title.show()

  def addDeviceWidget(self, name, subname, info):
    b = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL)
    b.set_margin_bottom(16)

    bb = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)

    l_title = Gtk.Label('<b>%s</b>' % ( name ))
    l_title.set_use_markup(True)
    l_title.set_halign(Gtk.Align.START)
    l_subtitle = Gtk.Label('<i>%s</i>' % ( subname ))
    l_subtitle.set_use_markup(True)
    l_subtitle.set_halign(Gtk.Align.START)

    bb.pack_start(l_title, False, False, 0)
    bb.pack_start(l_subtitle, False, False, 0)

    # build options
    r = []

    for k, v in info.items():
      if k == 'drivers':
        continue
      print('%-9s: %s' % (k, v))

    for pkg, pkginfo in info['drivers'].items():

      title = ''
      free = ''
      info_str = ''
      if pkginfo['from_distro']:
        info_str += ' distro'
      else:
        info_str += ' third-party'

      if pkginfo['free']:
        free = 'Using open source driver from %s (open source)' % (pkg)
      else:
        free = 'Using binary driver from %s (proprietary)' % (pkg)

      if pkginfo.get('builtin'):
        info_str += ' builtin'

      if pkginfo.get('recommended'):
        info_str += ' recommended'

      r_parent = None
      if len( r ):
        r_parent = r[0]

      r.append( Gtk.RadioButton.new_with_label_from_widget(r_parent, '%s' % (free)) )

    r_parent = None
    if len( r ):
      r_parent = r[0]

    r.append( Gtk.RadioButton.new_with_label_from_widget(r_parent, 'Do not use this device.') )

    for w in r:
      bb.pack_start(w, False, False, 0)

    p = Gtk.Image(stock=Gtk.STOCK_YES)
    p.set_valign(Gtk.Align.START)

    b.pack_start(p, False, False, 8)
    b.pack_start(bb, True, True, 0)

    self._box.pack_start(b, True, True, 1)
    b.show_all()
    print "adding widget..."



  def loadDevices(self):
    '''Show all devices which need drivers, and which packages apply to them.'''
    drivers = KororaDrivers.detect.system_device_drivers()

    for device, info in drivers.items():
        # TODO: cleanup
        c='V=$(cat "%s/vendor"); D=$(cat "%s/device"); N=$(lspci -d "$V:$D" | cut -d":" -f"3-"); echo -n $N' % (device, device)
        l = subprocess.check_output(c, shell=True)

        c='V=$(cat "%s/vendor"); D=$(cat "%s/device"); N=$(lspci -d "$V:$D" | cut -d":" -f2 | cut -d" " -f"2-"); echo -n $N' % (device, device)

        print info

        ls = subprocess.check_output(c, shell=True)
        d = { 'name': l, 'subname': ls, 'info': info }

        self.addDeviceWidget(l, ls, info)

        print('== %s ==' % device)
        for k, v in info.items():
          if k == 'drivers':
            continue
          print('%-9s: %s' % (k, v))

        for pkg, pkginfo in info['drivers'].items():
          info_str = ''
          if pkginfo['from_distro']:
            info_str += ' distro'
          else:
            info_str += ' third-party'
          if pkginfo['free']:
            info_str += ' free'
          else:
            info_str += ' non-free'
          if pkginfo.get('builtin'):
            info_str += ' builtin'
          if pkginfo.get('recommended'):
            info_str += ' recommended'
          print('%-9s: %s -%s' % ('driver', pkg, info_str))



        print('')

    if len( drivers.items() ) == 0:
        self.addNoDeviceWidget()


  def run(self):
    signal.signal(signal.SIGINT, signal.SIG_DFL)
    self.loadDevices()

    Gtk.main()


  def close(self, p1, p2):
    Gtk.main_quit(p1, p2);


app = App()
app.run()

