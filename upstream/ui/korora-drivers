#!/usr/bin/python
#
# Copyright 2012-2013 "Korora Project" <dev@kororaproject.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the temms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#

import dbus
import inspect
import os
import signal
import subprocess
import sys

from packagekit.package import PackageKitEnum

from gettext import gettext as _
import gettext

from gi.repository import Gtk, GObject

from KororaDrivers import detect
from KororaDrivers.YumCache import YumCache

class PKTransaction:
  def __init__(self, pk_control=None, install=[], remove=[]):
    '''Create a new PackageKit Transaction object.'''
    self._pk_control = pk_control

    self._error_enum = None
    self._finished_status = None
    self._interface = None

    self._cancellable = False

    self._bus = dbus.SystemBus()

    self._packages_install = install
    self._packages_remove = remove

    try:
      self._tid = self._pk_control.CreateTransaction()
    except (AttributeError, dbus.DBusException), e:
      if self._pk_control == None or (hasattr(e, '_dbus_error_name') and \
        e._dbus_error_name == 'org.freedesktop.DBus.Error.ServiceUnknown'):
        # first initialization (lazy) or timeout
        self._pk_control = dbus.Interface(self._bus.get_object(
            'org.freedesktop.PackageKit', '/org/freedesktop/PackageKit',
            False), 'org.freedesktop.PackageKit')
        self._tid = self._pk_control.CreateTransaction()
      else:
        raise

    self._interface = dbus.Interface(self._bus.get_object('org.freedesktop.PackageKit',
        self._tid, False), 'org.freedesktop.PackageKit.Transaction')

  def interface(self):
    return self._interface

  def id(self):
    return self._tid

  def connect(self, signal, callback):
    if signal == "status-changed":
      self._interface.connect_to_signal('StatusChanged', callback)
    elif signal == "progress-changed":
      self._interface.connect_to_signal('ItemProgress', callback)
    elif signal == "cancellable-changed":
      self._interface.connect_to_signal('AllowCancel', callback)
    elif signal == "finished":
      self._interface.connect_to_signal('Finished', callback)
    elif signal == "error":
      self._interface.connect_to_signal('ErrorCode', callback)
    else:
      raise Exception("Unknown signal")

  def run(self):
    if len( self._packages_install ):
      print "installing:", self._packages_install
      self._interface.InstallPackages(DBUSPkTransactionFlag('none'), self._packages_install)

    if len( self._packages_remove ):
      print "removing:", self._packages_remove
      self._interface.RemovePackages(DBUSPkTransactionFlag('none'), self._packages_remove, True, True)


  def cancel(self):
    if self._cancellable:
      try:
        self._interface.Cancel()
      except dbus.DBusException, e:
        if e._dbus_error_name == 'org.freedesktop.PackageKit.Transaction.CannotCancel':
          pass
        else:
          raise


class DBUSPkTransactionFlag(dbus.UInt64):
  def __new__(cls, filters):
    _filter = 0

    if isinstance(filters, str):
      for f in filters.split(';'):
        try:
          _filter |= ( 1 << PackageKitEnum.transaction_flag.index(f) )
        except:
          pass

    return super(DBUSPkTransactionFlag, cls).__new__(cls, _filter)


  def suggest_daemon_quit(self):
    '''Ask the PackageKit daemon to shutdown.'''

    try:
      self.pk_control.SuggestDaemonQuit()
    except (AttributeError, dbus.DBusException), e:
      # not initialized, or daemon timed out
      pass

  def _get_xn(self):
    '''Create a new PackageKit Transaction object.'''

    self._error_enum = None
    self._finished_status = None
    try:
      tid = self.pk_control.CreateTransaction()
    except (AttributeError, dbus.DBusException), e:
      if self.pk_control == None or (hasattr(e, '_dbus_error_name') and \
        e._dbus_error_name == 'org.freedesktop.DBus.Error.ServiceUnknown'):
        # first initialization (lazy) or timeout
        self.pk_control = dbus.Interface(self.bus.get_object(
            'org.freedesktop.PackageKit', '/org/freedesktop/PackageKit',
            False), 'org.freedesktop.PackageKit')
        tid = self.pk_control.CreateTransaction()
      else:
        raise

    return dbus.Interface(self.bus.get_object('org.freedesktop.PackageKit',
        tid, False), 'org.freedesktop.PackageKit.Transaction')

class App(object):
  def __init__(self):

    import dbus.mainloop.glib
    dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)

    self.yum_cache = YumCache()

    self._build_app()

    self.show_drivers()

  def _build_app(self):
    # build window
    w = Gtk.Window()
    w.set_position(Gtk.WindowPosition.CENTER)
    w.set_wmclass('Korora Drivers', 'Korora Drivers')
    w.set_title('Korora Drivers')

    # devices list - row 1
    self.scrolled_window_drivers = Gtk.ScrolledWindow()
    self.box_driver_detail = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
    self.scrolled_window_drivers.add_with_viewport(self.box_driver_detail)

    # controls - row 2
    self.box_driver_action = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL)

    self.label_driver_action = Gtk.Label('')
    self.label_driver_action.set_use_markup(True)
    self.label_driver_action.set_halign(Gtk.Align.START)

    self.box_driver_action.pack_start(self.label_driver_action, False, False, 0)

    # disclaimer - row 3
    l_proprietary = Gtk.Label('A proprietary driver has private code that Korora and other open source developers can\'t review or improve. Security and other updates are dependant on the driver vendor and their associated support process, if any.')
    l_proprietary.set_line_wrap(True)
    l_proprietary.set_halign(Gtk.Align.START)

    bx_main = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
    bx_main.pack_start(self.scrolled_window_drivers, True, True, 0)
    bx_main.pack_start(self.box_driver_action, False, False, 8)
    bx_main.pack_start(l_proprietary, False, False, 0)

    bx_main.set_margin_left(8)
    bx_main.set_margin_right(8)
    bx_main.set_margin_top(8)
    bx_main.set_margin_bottom(8)

    # add the box to the parent window and show
    sw = Gtk.ScrolledWindow()
    sw.add_with_viewport(bx_main)

    w.add(sw)
    w.connect('delete-event', self.close)
    w.set_size_request(600, 400)
    w.show_all()

    self._window = w

    self.button_driver_revert = Gtk.Button(label=_("Re_vert"), use_underline=True)
    self.button_driver_revert.set_margin_left(8)
    self.button_driver_revert.connect("clicked", self.on_driver_changes_revert)
    self.button_driver_apply = Gtk.Button(label=_("_Apply Changes"), use_underline=True)
    self.button_driver_apply.set_margin_left(8)
    self.button_driver_apply.connect("clicked", self.on_driver_changes_apply)
    self.button_driver_cancel = Gtk.Button(label=_("_Cancel"), use_underline=True)
    self.button_driver_cancel.set_margin_left(8)
    self.button_driver_cancel.connect("clicked", self.on_driver_changes_cancel)
    self.button_driver_restart = Gtk.Button(label=_("_Restart..."), use_underline=True)
    self.button_driver_restart.set_margin_left(8)
    self.button_driver_restart.connect("clicked", self.on_driver_restart_clicked)
    self.button_driver_revert.set_sensitive(False)
    self.button_driver_revert.set_visible(True)
    self.button_driver_apply.set_sensitive(False)
    self.button_driver_apply.set_visible(True)
    self.button_driver_cancel.set_visible(False)
    self.button_driver_restart.set_visible(False)

    self.box_driver_action.pack_end(self.button_driver_apply, False, False, 0)
    self.box_driver_action.pack_end(self.button_driver_revert, False, False, 0)
    self.box_driver_action.pack_end(self.button_driver_restart, False, False, 0)
    self.box_driver_action.pack_end(self.button_driver_cancel, False, False, 0)

    self.progress_bar = Gtk.ProgressBar()
    self.progress_bar.set_margin_left(8)
    self.apply_spinner = Gtk.Spinner()
    self.apply_spinner.set_margin_left(8)
    self.box_driver_action.pack_end(self.progress_bar, False, False, 0)
    self.box_driver_action.pack_end(self.apply_spinner, False, False, 0)
    self.progress_bar.set_visible(False)
    self.apply_spinner.set_visible(False)

    self.devices = detect.system_device_drivers(self.yum_cache)
    self.driver_changes = []
    self.orig_selection = {}

    # HACK: the case where the selection is actually "Do not use"; is a little
    #       tricky to implement because you can't check for whether a package is
    #       installed or any such thing. So let's keep a list of all the
    #       "Do not use" radios, set those active first, then iterate through
    #       orig_selection when doing a Reset.
    self.no_drv = []
    self.nonfree_drivers = 0
    self.ui_building = False

  def addNoDeviceWidget(self):
    l_title = Gtk.Label('<b>No additional drivers were identified for you hardware.</b>')
    l_title.set_use_markup(True)

    self._box.pack_start(l_title, True, True, 1)
    l_title.show()

  def on_driver_changes_status(self, status):
    print "Status: %d" % status
    print self.transaction.interface().status
    print self.transaction.interface().role
    print self.transaction.interface().status

  def on_driver_changes_progress(self, package_id, status, percentage):
    self.button_driver_revert.set_visible(False)
    self.button_driver_apply.set_visible(False)
    self.button_driver_restart.set_visible(False)
    self.button_driver_cancel.set_visible(True)
    self.progress_bar.set_visible(True)

    self.label_driver_action.set_label(_("Applying changes..."))
    self.progress_bar.set_fraction(percentage / 100.0)

  def on_driver_changes_finish(self, status, code):
    self.progress_bar.set_visible(False)
    self.apply_spinner.set_visible(False)
    self.apply_spinner.stop()
    self.clear_changes()
    self.yum_cache = YumCache()
    self.set_driver_action_status()
    self.update_label_and_icons_from_status()
    self.button_driver_revert.set_visible(True)
    self.button_driver_apply.set_visible(True)
    self.button_driver_cancel.set_visible(False)
    self.scrolled_window_drivers.set_sensitive(True)

  def on_driver_changes_error(self, error_code, error_details):
    print "odce: %s" % str(error_details)
    self.on_driver_changes_revert()
    self.set_driver_action_status()
    self.update_label_and_icons_from_status()
    self.button_driver_revert.set_visible(True)
    self.button_driver_apply.set_visible(True)
    self.button_driver_cancel.set_visible(False)
    self.scrolled_window_drivers.set_sensitive(True)

  def on_driver_changes_cancellable_changed(self, cancellable):
    print "odccc: %s" % str(cancellable)
    self.button_driver_cancel.set_sensitive(cancellable)

  def on_driver_changes_apply(self, button):
    installs = []
    removals = []

    for pkg in self.driver_changes:
      if pkg.is_installed():

        removals.append(pkg.pkname)

        # akmods need any created kmods to also be removed
        # assumes "akmod-name" packages produce "kmod-name-*" packages
        if pkg.name.startswith('akmod-'):
          print "searching for akmod subpackages: %s-*" % pkg.name[1:]

          for p in self.yum_cache.search_installed( '%s-*' % pkg.name[1:] ):
            removals.append(p.pkname)

      else:
        installs.append(pkg.pkname)

    try:
      self.transaction = PKTransaction(install=installs, remove=removals)
      self.transaction.connect("status-changed", self.on_driver_changes_status)
      self.transaction.connect("progress-changed", self.on_driver_changes_progress)
      self.transaction.connect("cancellable-changed", self.on_driver_changes_cancellable_changed)
      self.transaction.connect("finished", self.on_driver_changes_finish)
      self.transaction.connect("error", self.on_driver_changes_error)
      self.transaction.run()
      self.button_driver_revert.set_sensitive(False)
      self.button_driver_apply.set_sensitive(False)
      self.scrolled_window_drivers.set_sensitive(False)
      self.apply_spinner.start()
      self.apply_spinner.set_visible(True)

    except Exception as e:
      print("Warning: install transaction not completed successfully: {}".format(e))

  def on_driver_changes_revert(self, button_revert=None):
    # HACK: set all the "Do not use" first; then go through the list of the
    #       actually selected drivers.
    for button in self.no_drv:
      button.set_active(True)

    for alias in self.orig_selection:
      button = self.orig_selection[alias]
      button.set_active(True)

    self.clear_changes()

    self.button_driver_revert.set_sensitive(False)
    self.button_driver_apply.set_sensitive(False)

  def on_driver_changes_cancel(self, button_cancel):
    self.transaction.cancel()
    self.clear_changes()

  def on_driver_restart_clicked(self, button_restart):
    subprocess.call(['/usr/lib/indicator-session/gtk-logout-helper', '--shutdown'])

  def clear_changes(self):
    self.orig_selection = {}
    self.driver_changes = []

  def on_driver_selection_changed(self, button, modalias, pkg_name=None):
    if self.ui_building:
      return

    pkg = None
    try:
      if pkg_name:
        pkg = self.yum_cache[pkg_name]
    except KeyError:
      pass

    if button.get_active():
      if pkg in self.driver_changes:
        self.driver_changes.remove(pkg)

      if (pkg is not None
          and modalias in self.orig_selection
          and button is not self.orig_selection[modalias]):
        self.driver_changes.append(pkg)
    else:
      if pkg in self.driver_changes:
        self.driver_changes.remove(pkg)

      # for revert; to re-activate the original radio buttons.
      if modalias not in self.orig_selection:
        self.orig_selection[modalias] = button

      if (pkg is not None
          and pkg not in self.driver_changes
          and pkg.is_installed() ):
        self.driver_changes.append(pkg)

    self.button_driver_revert.set_sensitive(bool(self.driver_changes))
    self.button_driver_apply.set_sensitive(bool(self.driver_changes))

  def gather_device_data(self, device):
    '''Get various device data used to build the GUI.

    return a tuple of (overall_status string, icon, drivers dict).
    the drivers dict is using this form:
    {
      "recommended/alternative": {
        pkg_name: {
          'selected': True/False
          'description': 'description'
          'builtin': True/False
        }
      }
      "manually_installed": {
        "manual": {
          'selected': True,
          'description': description_string
        }
      }
      "no_driver": {
        "no_driver": {
          'selected': True/False,
          'description': description_string
        }
      }
    }

    Please note that either manually_installed and no_driver are set to None if not applicable
    (no_driver isn't present if there are builtins)
    '''

    possible_overall_status = {
      'recommended': (_("This device is using the recommended driver."), "recommended-driver"),
      'alternative': (_("This device is using an alternative driver."), "other-driver"),
      'manually_installed': (_("This device is using a manually-installed driver."), "other-driver"),
      'no_driver': (_("This device is not working."), "disable-device")
    }

    returned_drivers = {'recommended': {}, 'alternative': {}, 'manually_installed': {}, 'no_driver': {}}
    have_builtin = False 
    one_selected = False

    try:
      if device['manual_install']: 
        returned_drivers['manually_installed'] = {True: {'selected': True, 'description': _("Continue using a manually installed driver")}}
    except KeyError:
      pass

    for pkg_driver_name in device['drivers']:
      current_driver = device['drivers'][pkg_driver_name]

      # get general status
      driver_status = 'alternative'
      try:
        if current_driver['recommended'] and current_driver['from_distro']:
          driver_status = 'recommended'
      except KeyError:
        pass

      builtin = False
      try:
        if current_driver['builtin']:
          builtin = True
          have_builtin = True
      except KeyError:
        pass

      try:
        pkg = self.yum_cache[pkg_driver_name]
        installed  = pkg.is_installed()
        description = _("Using {}").format(pkg.shortname)
        #description = _("Using {} from {}").format(pkg.candidate.summary, pkg.shortname)
      except KeyError:
        print("WARNING: a driver ({}) doesn't have any available package associated: {}".format(pkg_driver_name, current_driver))
        continue

      # gather driver description
      if current_driver['free']:
        licence = _("open source")
      else:
        licence = _("proprietary")

      if driver_status == 'recommended':
        base_string = _("{base_description} ({licence}, tested)")
      else:
        base_string = _("{base_description} ({licence})") 
      description = base_string.format(base_description=description, licence=licence)

      selected = False
      if not builtin and not returned_drivers['manually_installed']:
        selected = installed
        if installed:
          selected = True
          one_selected = True

      returned_drivers[driver_status].setdefault(pkg_driver_name, {'selected': selected, 'description': description, 'builtin': builtin})

    # adjust making the needed addition
    if not have_builtin:
      selected = False

      if not one_selected:
        selected = True
      returned_drivers["no_driver"] = {True: {'selected': selected, 'description': _("Do not use the device")}}

    else:
      # we have a builtin and no selection: builtin is the selected one then
      if not one_selected:
        for section in ('recommended', 'alternative'):
          for pkg_name in returned_drivers[section]:
            if returned_drivers[section][pkg_name]['builtin']:
              returned_drivers[section][pkg_name]['selected'] = True

    # compute overall status
    for section in returned_drivers:
      for keys in returned_drivers[section]:
        if returned_drivers[section][keys]['selected']:
          (overall_status, icon) = possible_overall_status[section]

    return (overall_status, icon, returned_drivers)


  def show_drivers(self):
    self.ui_building = True
    self.dynamic_device_status = {}
    for device in sorted(self.devices.keys()):
      (overall_status, icon, drivers) = self.gather_device_data(self.devices[device])

      driver_status = Gtk.Image()
      driver_status.set_valign(Gtk.Align.START)
      driver_status.set_halign(Gtk.Align.CENTER)
      driver_status.set_from_icon_name(icon, Gtk.IconSize.MENU)
      device_box = Gtk.Box(spacing=6, orientation=Gtk.Orientation.HORIZONTAL)
      device_box.pack_start(driver_status, False, False, 6)
      device_detail = Gtk.Box(spacing=6, orientation=Gtk.Orientation.VERTICAL)
      device_box.pack_start(device_detail, True, True, 0)

      widget = Gtk.Label("{}: {}".format(self.devices[device].get('vendor', _('Unknown')), self.devices[device].get('model', _('Unknown'))))
      widget.set_halign(Gtk.Align.START)
      device_detail.pack_start(widget, True, False, 0)
      widget = Gtk.Label("<small>{}</small>".format(overall_status))
      widget.set_halign(Gtk.Align.START)
      widget.set_use_markup(True)
      device_detail.pack_start(widget, True, False, 0)
      self.dynamic_device_status[device] = (driver_status, widget)

      option_group = None
      # define the order of introspection
      for section in ('recommended', 'alternative', 'manually_installed', 'no_driver'):
        for driver in drivers[section]:
          radio_button = Gtk.RadioButton.new_with_label(None, drivers[section][driver]['description'])

          if option_group:
            radio_button.join_group(option_group)

          else:
            option_group = radio_button

          device_detail.pack_start(radio_button, True, False, 0)
          radio_button.set_active(drivers[section][driver]['selected'])

          if section == 'no_driver': 
            self.no_drv.append(radio_button)

          if section in ('manually_install', 'no_driver') or ('builtin' in drivers[section][driver] and drivers[section][driver]['builtin']):
            radio_button.connect("toggled", self.on_driver_selection_changed, device)
          else:
            radio_button.connect("toggled", self.on_driver_selection_changed, device, driver)

          if drivers['manually_installed'] and section != 'manually_installed':
            radio_button.set_sensitive(False)

      self.box_driver_detail.pack_start(device_box, False, False, 6)

    self.ui_building = False
    self.box_driver_detail.show_all()
    self.set_driver_action_status()

  def update_label_and_icons_from_status(self): 
    '''Update the current label and icon, computing the new device status'''

    for device in self.devices:
      (overall_status, icon, drivers) = self.gather_device_data(self.devices[device])
      (driver_status, widget) = self.dynamic_device_status[device]

      driver_status.set_from_icon_name(icon, Gtk.IconSize.MENU)
      widget.set_label("<small>{}</small>".format(overall_status))

  def set_driver_action_status(self):
    # Update the label in case we end up having some kind of proprietary driver in use.
    if (os.path.exists('/var/run/reboot-required')):
      self.label_driver_action.set_label(_("You need to restart the computer to complete the driver changes."))
      self.button_driver_restart.set_visible(True)
      self.window_main.set_urgency_hint(True)
      return

    self.nonfree_drivers = 0
    for device in self.devices:
      for pkg_name in self.devices[device]['drivers']:
        pkg = self.yum_cache[pkg_name]

        if not self.devices[device]['drivers'][pkg_name]['free'] and pkg.is_installed():
          self.nonfree_drivers = self.nonfree_drivers + 1

        if self.nonfree_drivers > 0:
          self.label_driver_action.set_label( gettext.ngettext(
            "%(count)d proprietary driver in use.",
            "%(count)d proprietary drivers in use.", self.nonfree_drivers)
            % { 'count': self.nonfree_drivers})

        else:
          self.label_driver_action.set_label(_("No proprietary drivers are in use."))


  def run(self):
    signal.signal(signal.SIGINT, signal.SIG_DFL)
    Gtk.main()


  def close(self, p1, p2):
    Gtk.main_quit(p1, p2);


app = App()
app.run()

