#!/usr/bin/python
#
# Copyright 2012-2013 "Korora Project" <dev@kororaproject.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the temms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#

import inspect
import os
import signal
import sys


from gi.repository import Gtk

class App(object):
  def __init__(self):

    self._build_app()

  def _build_app(self):
    # build window
    w = Gtk.Window()
    w.set_position(Gtk.WindowPosition.CENTER)
    w.set_wmclass('Korora Drivers', 'Korora Drivers')
    w.set_title('Korora Drivers')
    w.set_size_request(600, 400)

    l_inuse = Gtk.Label('<b>%d proprietary driver(s) are in use.</b>' % (0))
    l_inuse.set_use_markup(True)
    l_inuse.set_halign(Gtk.Align.START)

    l_proprietary = Gtk.Label('A proprietary driver has private code that Korora and other open source developers can\'t review or improve. Security and other updates are dependant on the driver vendor  and their associated support process, if any.')
    l_proprietary.set_line_wrap(True)
    l_proprietary.set_halign(Gtk.Align.START)

    b_revert = Gtk.Button('Revert')
    b_revert.set_margin_left(8)
    b_apply = Gtk.Button('Apply Changes')
    b_apply.set_margin_left(8)

    sw_devices = Gtk.ScrolledWindow()
    bx_devices = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
    sw_devices.add_with_viewport(bx_devices)

    bx_controls = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL)
    bx_controls.pack_start(l_inuse, True, True, 0)
    bx_controls.pack_start(b_revert, False, False, 0)
    bx_controls.pack_start(b_apply, False, False, 0)

    bx_main = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
    bx_main.pack_start(sw_devices, True, True, 0)
    bx_main.pack_start(bx_controls, False, False, 8)
    bx_main.pack_start(l_proprietary, False, False, 0)

    self._box = bx_devices

    bx_main.set_margin_left(8)
    bx_main.set_margin_right(8)
    bx_main.set_margin_top(8)
    bx_main.set_margin_bottom(8)

    #TODO: REMOVE
    self.addDeviceWidget()

    # add the box to the parent window and show
    w.add(bx_main)
    w.connect('delete-event', self.close)
    w.show_all()

    self._window = w


  def addDeviceWidget(self):
    b = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL)
    b.set_margin_bottom(16)

    bb = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)


    l_title = Gtk.Label('<b>Advanced Micro Devices [AMD] nee ATI Barts LE [Radeon HD 6790]</b>')
    l_title.set_use_markup(True)
    l_title.set_halign(Gtk.Align.START)
    l_subtitle = Gtk.Label('<i>VGA Compatible Controller</i>')
    l_subtitle.set_use_markup(True)
    l_subtitle.set_halign(Gtk.Align.START)

    bb.pack_start(l_title, False, False, 0)
    bb.pack_start(l_subtitle, False, False, 0)

    r1 = Gtk.RadioButton.new_with_label_from_widget(None, 'Using AMD Catalyst binary driver from kmod-catalyst (proprietary)')
    r2 = Gtk.RadioButton.new_with_label_from_widget(r1, 'Using AMD Catalyst binary driver from akmod-catalyst (proprietary)')
    r3 = Gtk.RadioButton.new_with_label_from_widget(r1, 'Using Radeon open source driver (open source)')
    r3.set_active(True)
    r4 = Gtk.RadioButton.new_with_label_from_widget(r1, 'Do not use this device.')

    bb.pack_start(r1, False, False, 0)
    bb.pack_start(r2, False, False, 0)
    bb.pack_start(r3, False, False, 0)
    bb.pack_start(r4, False, False, 0)

    p = Gtk.Image(stock=Gtk.STOCK_YES)
    p.set_valign(Gtk.Align.START)

    b.pack_start(p, False, False, 8)
    b.pack_start(bb, True, True, 0)

    self._box.pack_start(b, True, True, 1)
    b.show_all()
    print "adding widget..."

  def AddCheckButton(self, button):
    c = Gtk.CheckButton("CheckButton")
    self._box.pack_start(c, False, False, 1)
    c.show()
    print "adding checkbox..."


  def run(self):
    signal.signal(signal.SIGINT, signal.SIG_DFL)
    Gtk.main()

  def close(self, p1, p2):
    Gtk.main_quit(p1, p2);


app = App()
app.run()

